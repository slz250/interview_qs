JVM
=====================================
-a virtual machine is a software implementation of a physical
machine
    -best example is a calculator --> works like physical calculator
    but is a software implementation

-software based virtual machines acts as run time engine to
run a particular programming language application
    -JVM is part of JRE and loads/runs java class file

Steps of JVM:
-java source file (.java file) compiled into java class file (.class file)
by java compiler and passed to..

class loader sub system: loads .class file by loading/linking/initialization
-loading phase:
main info of the class such as:
a) name of class
b) immediate parent name
c) class? interface? enum?
d) methods, constructors, variable info
e) modifier info
f) constant pool info

-linking phase:
security verification; Byte Code Verifier determines
whether .class file is properly formatted, structurally correct,
generated by valid compiler
-preparation phase:
allocate memory for class level static variables and assign default
values

initialization:
-static variables have been assigned and static blocks will be
executed from top to bottom!

more loading!
1) bootstrap class loader
-loads all core java API classes (i.e.: String, StringBuilder, StringBuffer)
    -java.lang, java.io, java.util
2) extension class loader
-loads everything in ext folder
3) application class loader
-loads from application class path (environment variable class path)

=========================================
JDK
=========================================
-development environment
-includes JRE, interpreter/loader (Java), compiler (javac), archiver (jar), documentation
generator (Javadoc)
=========================================
JRE
=========================================
-includes JVM, core classes, supporting files

JDK -> JRE (for execution of java programs) + dev tools (for development of java programs)
JRE -> JVM (executes program line by line hence interpreter) + library classes